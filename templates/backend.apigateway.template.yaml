AWSTemplateFormatVersion: '2010-09-09'
Description: APPI Backend - API Gateway
Parameters:
  StackName:
    Type: String
    Default: appi

  EnvironmentType:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - qa
    - prod

  LambdaExecutionRoleArn:
    Type: String

  # AUTHORIZER

  IssuerName:
    Type: String

  ClientId:
    Type: String

  # NETWORK

  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  CustomAuthorizerFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${StackName}-${EnvironmentType}-apig-custom-authorizer'
      Description: API Gateway custom authorizer
      MemorySize: 256
      Timeout: 5
      Runtime: nodejs10.x
      Role: !Ref LambdaExecutionRoleArn
      Handler: index.handler
      VpcConfig:
        SubnetIds: !Ref Subnets
        SecurityGroupIds:
          - !Ref SecurityGroupId
      Environment:
        Variables:
          stage: !Ref EnvironmentType
          issuer: !Ref IssuerName
          cid: !Ref ClientId
      Code:
        ZipFile: >
          'use strict';
          exports.handler = function(event, context, callback) {
            console.log('TODO');
            callback(null, 'TODO');
          };

  ApiGatewayRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref ApiGateway
      Description: !Sub '${EnvironmentType} deployment'
      StageName: !Ref EnvironmentType
    DependsOn: ApiGateway

  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body: !Sub |
        ---
        swagger: "2.0"
        info:
          version: "1.0.0"
          termsOfService: SLA-tbd
          title: "APPI Public API (${EnvironmentType})"
          description: >-
            Rest API to expose resources to D&O tool. The main entry point is via the /companies endpoint. Happy underwriting!
        schemes:
          - "https"

        paths:
          /companies:
            get:
              tags:
                - companies
              summary: get a collection of company objects
              description: ''
              operationId: getCompanies
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: true
                description: the company name for the search
                type: "string"
              responses:
                '200':
                  description: "Search Response"
                  schema:
                    type: array
                    items:
                      $ref: "#/definitions/CompanySearchResult"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                responses:
                  default:
                    statusCode: "200"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-get/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            post:
              tags:
                - companies
              summary: create a company objects
              description: ''
              operationId: createCompany
              produces:
              - "application/json"
              parameters:
              responses:
                '200':
                  description: "Company Response"
                  schema:
                    type: array
                    items:
                      $ref: "#/definitions/CompanySearchResult"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                responses:
                  default:
                    statusCode: "200"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-post/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /companies/{companyId}:
            get:
              tags:
                - companies
              summary: get a company's information by id
              description: ''
              operationId: getCompany
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "Search Response"
                  schema:
                    $ref: "#/definitions/CompanyProfile"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: Not found
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/CompanyProfile"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/details:
            get:
              tags:
                - details
              summary: get a company's details
              description: ''
              operationId: getCompanyInfo
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/CompanyDetails"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-details-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/earnings:
            get:
              tags:
                - earnings
              summary: get a company's earnings
              description: ''
              operationId: getCompanyEarnings
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Earnings"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-earnings-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/estimations:
            get:
              tags:
                - estimations
              summary: get a company's ESP estimation chart
              description: ''
              operationId: getCompanyESPEstimationChart
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/ESPEstimationChart"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-estimations-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/financials:
            get:
              tags:
                - financials
              summary: get a company's financials chart
              description: ''
              operationId: getCompanyFinancialChart
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              - name: "range"
                in: "query"
                required: true
                description: the date range
                type: "string"
                enum:
                - "Annual"
                - "Quarterly"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/FinancialsChart"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-financials-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/financials/income:
            get:
              tags:
                - financials
              summary: get a company's income statement
              description: ''
              operationId: getCompanyFinancialIncomeStatement
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/IncomeStatement"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-financials-income-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/financials/balance:
            get:
              tags:
                - financials
              summary: get a company's balance sheet
              description: ''
              operationId: getCompanyFinancialBalanceSheet
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/BalanceSheet"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-financials-balance-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/financials/cash:
            get:
              tags:
                - financials
              summary: get a company's cash flow
              description: ''
              operationId: getCompanyFinancialCashFlow
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/CashFlow"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-financials-cash-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/financials/debt:
            get:
              tags:
                - financials
              summary: get a company's debt maturity chart
              description: ''
              operationId: getCompanyFinancialDebtMaturityChart
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/DebtMaturityChart"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-financials-debt-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/holders:
            get:
              tags:
                - holders
              summary: get a company's holders
              description: ''
              operationId: getCompanyHolders
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Holders"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-holders-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/holders/direct:
            get:
              tags:
                - holders
              summary: get a company's direct holders
              description: ''
              operationId: getCompanyDirectHolders
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Table"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-holders-direct-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/holders/transaction:
            get:
              tags:
                - holders
              summary: get a company's insider transactions
              description: ''
              operationId: getCompanyInsiderTransactions
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Table"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-holders-transaction-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/holders/institution:
            get:
              tags:
                - holders
              summary: get a company's institution holders
              description: ''
              operationId: getCompanyInstitutionHolders
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Table"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-holders-institution-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/predictors:
            get:
              tags:
                - predictors
              summary: get a company's top risk predictors
              description: ''
              operationId: getCompanyRiskPredictors
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    type: "array"
                    items:
                      $ref: "#/definitions/Predictor"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-predictors-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/attachments:
            get:
              tags:
                - attachments
              summary: get a attachments
              description: ''
              operationId: getCompanyAttachments
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Attachment"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-attachments-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/programs:
            get:
              tags:
                - programs
              summary: get a company's existing program(s) from ArgoPro
              description: ''
              operationId: getCompanyExistingPrograms
              produces:
              - "application/json"
              parameters:
              - name: "type"
                in: "query"
                required: false
                description: expired or not
                type: "string"
                enum:
                  - expired
              - name: "worksheet_id"
                in: "query"
                required: false
                description: worksheet id
                type: "string"
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/ExistingProgram"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-programs-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            post:
              tags:
                - programs
              summary: create a new program
              description: ''
              operationId: postCompanyProgram
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId
                type: "string"
              - name: "item"
                in: "body"
                required: true
                description: the user object
                schema:
                  $ref: "#/definitions/CoverageProgram"
              responses:
                '200':
                  description: "the new program table along with attachment points"
                  schema:
                    $ref: "#/definitions/NewProgram"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-programs-post/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/programs/{programId}:
            put:
              tags:
                - programs
              summary: Update a program
              description: ''
              operationId: putCompanyProgram
              produces:
              - "application/json"
              parameters:
              - name: "programId"
                in: "path"
                required: true
                description: the programId for the program
                type: "string"
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId
                type: "string"
              - name: "item"
                in: "body"
                required: true
                description: the user object
                schema:
                  $ref: "#/definitions/CoverageProgram"
              responses:
                '200':
                  description: "the new program table along with attachment points"
                  schema:
                    $ref: "#/definitions/NewProgram"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-programs-_programId-put/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/ratings:
            get:
              tags:
                - ratings
              summary: get a company's stock ratings
              description: ''
              operationId: getCompanyRatings
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/AnalystRatingChart"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-ratings-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/ratios:
            get:
              tags:
                - ratios
              summary: get a company's ratios
              description: ''
              operationId: getCompanyRatios
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              - name: "peerGroup"
                in: "query"
                required: false
                description: the peer group for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Ratios"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-ratios-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/risks:
            get:
              tags:
                - risks
              summary: get a risk aggregation for a company id
              description: ''
              operationId: getRisks
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
                format: uuid
              responses:
                '200':
                  description: "Response"
                  schema:
                    $ref: "#/definitions/RiskAggregation"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-risks-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/stats:
            get:
              tags:
                - stats
              summary: get a company's key stats
              description: ''
              operationId: getCompanyKeyStats
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              - name: "peerGroup"
                in: "query"
                required: false
                description: the peer group for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Table"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-stats-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/stocks:
            get:
              tags:
                - stocks
              summary: get a stock chart for a company id
              description: ''
              operationId: getStockChart
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
                format: uuid
              - name: "indices"
                in: "query"
                required: false
                description: the list of stock indices
                type: "string"
              - name: "range"
                in: "query"
                required: false
                description: the date range
                type: "string"
                enum:
                - "2Y"
                - "1Y"
                - "YTD"
                - "6M"
                - "1M"
              responses:
                '200':
                  description: "Response"
                  schema:
                    $ref: "#/definitions/StockChartResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-stocks-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/stocks/variations:
            get:
              tags:
                - stocks
              summary: get a list of stock variations for a company id
              description: ''
              operationId: getStockVariations
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
                format: uuid
              - name: "range"
                in: "query"
                required: false
                description: the date range
                type: "string"
                enum:
                - "2Y"
                - "1Y"
                - "YTD"
                - "6M"
                - "1M"
              responses:
                '200':
                  description: "Response"
                  schema:
                    type: "array"
                    items:
                      $ref: "#/definitions/StockCard"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-stocks-variations-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/tradings:
            get:
              tags:
                - tradings
              summary: get a company's tradings
              description: ''
              operationId: getCompanyTradings
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Tradings"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-tradings-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/documents:
            get:
              tags:
                - documents
              summary: get a company's documents
              description: ''
              operationId: getDocuments
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              - name: "documentType"
                in: "query"
                required: true
                description: the document type
                type: "string"
                enum:
                  - 8-K
                  - 10-K
                  - 10-Q
                  - Complaint
                  - Proxy
              responses:
                '200':
                  description: "200 response"
                  schema:
                    type: array
                    items:
                      $ref: "#/definitions/Document"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-documents-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/documents/{documentId}:
            get:
              tags:
                - documents
              summary: get a document
              description: ''
              operationId: getDocument
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
                format: uuid
              - name: "documentId"
                in: "path"
                required: true
                description: the id of the document
                type: "string"
              - name: "documentType"
                in: "query"
                required: true
                description: the document type
                type: "string"
                enum:
                  - 8-K
                  - 10-K
                  - 10-Q
                  - Complaint
                  - Proxy
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/DocumentLink"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-documents-_documentId-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /companies/{companyId}/events:
            get:
              tags:
                - events
              summary: get a list of company events
              description: ''
              operationId: getEvents
              produces:
              - "application/json"
              parameters:
              - name: "companyId"
                in: "path"
                required: true
                description: the companyId for the search
                type: "string"
              - name: "filters"
                in: "query"
                required: false
                description: the list of filters
                type: "string"
              - name: "startDate"
                in: "query"
                required: false
                description: the start date
                type: "string"
              - name: "endDate"
                in: "query"
                required: false
                description: the end date
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    type: array
                    items:
                      $ref: "#/definitions/Event"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-companies-_companyId-events-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /users:
            get:
              tags:
                - users
              summary: get a list of users
              description: ''
              operationId: getUsers
              produces:
              - "application/json"
              responses:
                '200':
                  description: "Response"
                  schema:
                    type: array
                    items:
                      $ref: "#/definitions/User"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            post:
              tags:
                - users
              summary: create a user
              description: ''
              operationId: createUser
              produces:
              - "application/json"
              parameters:
              - name: "item"
                in: "body"
                required: true
                description: the user object
                schema:
                  $ref: "#/definitions/User"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/User"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-post/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /users/{userId}:
            get:
              tags:
                - users
              summary: get a user by id
              description: ''
              operationId: getUserById
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                description: the userId for the user
                type: "string"
              responses:
                '200':
                  description: "User Response"
                  schema:
                    $ref: "#/definitions/User"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: Not found
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-_userId-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            put:
              tags:
                - users
              summary: update a user by id
              description: ''
              operationId: putUserById
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                description: the userId for the user
                type: "string"
              - name: "item"
                in: "body"
                required: true
                description: the updated user object
                schema:
                  $ref: "#/definitions/User"
              responses:
                '200':
                  description: "User Response"
                  schema:
                    $ref: "#/definitions/User"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: Not found
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
                - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-_userId-put/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /users/{userId}/worksheets:
            get:
              tags:
                - user_worksheets
              summary: get a list of worksheets
              description: ''
              operationId: getWorksheets
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                description: the userId for the user
                type: "string"
              responses:
                '200':
                  description: "Get a collection of worksheets for the user"
                  schema:
                    type: array
                    items:
                      $ref: "#/definitions/Worksheet"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: Not found
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-_userId-worksheets-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            post:
              tags:
                - user_worksheets
              summary: create a worksheet for a user by id
              description: ''
              operationId: createWorksheet
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                description: the userId for the user
                type: "string"
              - name: "item"
                in: "body"
                required: true
                description: the worksheet object
                schema:
                  $ref: "#/definitions/Worksheet"
              responses:
                '200':
                  description: "Worksheet Response"
                  schema:
                    $ref: "#/definitions/Worksheet"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: Not found
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-_userId-worksheets-post/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /users/{userId}/worksheets/{worksheetId}:
            get:
              tags:
                - user_worksheets
              summary: get a worksheet by id
              description: ''
              operationId: getWorksheetById
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                description: the userId for the user
                type: "string"
              - name: "worksheetId"
                in: "path"
                required: true
                description: the worksheetId for the worksheet
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Worksheet"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-_userId-worksheets-_worksheetId-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            put:
              tags:
                - user_worksheets
              summary: Update a worksheet by id
              description: ''
              operationId: putWorksheetById
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                description: the userId for the user
                type: "string"
              - name: "worksheetId"
                in: "path"
                required: true
                description: the worksheetId for the worksheet
                type: "string"
              - name: "item"
                in: "body"
                required: true
                description: the worksheet object
                schema:
                  $ref: "#/definitions/Worksheet"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Worksheet"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-_userId-worksheets-_worksheetId-put/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            delete:
              tags:
                - user_worksheets
              summary: Delete a worksheet by id
              description: ''
              operationId: deleteWorksheetById
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                description: the userId for the user
                type: "string"
              - name: "worksheetId"
                in: "path"
                required: true
                description: the worksheetId for the worksheet
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Success"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-_userId-worksheets-_worksheetId-delete/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /users/{userId}/worksheets/{worksheetId}/pdf:
            get:
              tags:
                - user_worksheets
              summary: get pdf
              description: ''
              operationId: getWorksheetPDF
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                description: the userId for the user
                type: "string"
              responses:
                '200':
                  description: "Get a pdf of the worksheet"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: Not found
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-_userId-worksheets-_worksheetId-pdf-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            post:
              tags:
                - user_worksheets pdf
              summary: Create a worksheet pdf by id
              description: ''
              operationId: postWorksheetPDFById
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                description: the userId for the user
                type: "string"
              - name: "worksheetId"
                in: "path"
                required: true
                description: the worksheetId for the worksheet
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Worksheet"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-_userId-worksheets-_worksheetId-pdf-post/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /users/{userId}/worksheets/{worksheetId}/imageright:
            post:
              tags:
                - user_worksheets ir
              summary: Archive a worksheet PDF to ImageRight
              description: ''
              operationId: postWorksheetToIRById
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                description: the userId for the user
                type: "string"
              - name: "worksheetId"
                in: "path"
                required: true
                description: the worksheetId for the worksheet
                type: "string"
              - name: "review"
                in: "body"
                required: true
                description: PDF review boolean
                type: "boolean"
              - name: "documentType"
                in: "body"
                required: true
                description: the worksheet archive type
                schema:
                  $ref: "#/definitions/WorksheetType"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Success"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate body, query string parameters, and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-users-_userId-worksheets-_worksheetId-ir-post/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /documents:
            get:
              tags:
                - bad actors
              summary: get documents by personId
              description: ''
              operationId: getBadActors
              produces:
              - "application/json"
              parameters:
              - name: "mscads"
                in: "query"
                required: true
                description: mscads
                type: "string"
              responses:
                '200':
                  description: "Get bad actor's info"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: Bad request
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: Not found
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Internal error
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-documents-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /industries:
            get:
              tags:
                - industries
              summary: get the industry chart
              description: ''
              operationId: getIndustryChart
              produces:
              - "application/json"
              parameters:
              - name: "type"
                in: "query"
                required: false
                description: if all or chart data will be returned
                type: "string"
              - name: "companyId"
                in: "query"
                required: true
                description: the industry filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/IndustryChart"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-industries-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /private:
            get:
              tags:
                - private
              summary: get private companies
              description: ''
              operationId: getPrivateCompanies
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: false
                description: the private filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            post:
              tags:
                - private
              summary: post private companies
              description: ''
              operationId: postPrivateCompanies
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-post/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /private/{companyId}/:
            get:
              tags:
                - private
              summary: get private company
              description: ''
              operationId: getPrivateCompany
              produces:
              - "application/json"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            put:
              tags:
                - private
              summary: update private company
              description: ''
              operationId: updatePrivateCompany
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: false
                description: the private filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-put/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"


          /private/{companyId}/balance:
            get:
              tags:
                - private
              summary: get private company's balance
              description: ''
              operationId: getPrivateCompanyBalance
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: false
                description: the private filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-balance-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /private/{companyId}/cash:
            get:
              tags:
                - private
              summary: get private companys cashflow
              description: ''
              operationId: getPrivateCompanyCash
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: false
                description: the private filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-cash-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            post:
              tags:
                - private
              summary: Post private companys cashflow
              description: ''
              operationId: PostPrivateCompanyCash
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: false
                description: the private filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-cashflow-post/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /private/{companyId}/compensation:
            get:
              tags:
                - private
              summary: get private companies
              description: ''
              operationId: getPrivateCompanies
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: false
                description: the private filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-compensation-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
          /private/{companyId}/submission:
            get:
              tags:
                - private
              summary: get private company's submission
              description: ''
              operationId: getPrivateCompanySubmission
              produces:
              - "application/json"
  
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-submission-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            post:
              tags:
                - private
              summary: post private company's submission
              description: ''
              operationId: postPrivateCompanySubmission
              produces:
              - "application/json"
  
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-submission-post/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /private/{companyId}/employment:
            get:
              tags:
                - private
              summary: get private company's employee
              description: ''
              operationId: getPrivateCompanyEmployee
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: false
                description: the private filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-employment-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /private/{companyId}/fiduciaries:
            get:
              tags:
                - private
              summary: get private companies fiduciaries
              description: ''
              operationId: getPrivateCompaniyFiduciaries
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: false
                description: the private filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-fiduciary-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /private/{companyId}/income:
            get:
              tags:
                - private
              summary: get private company income
              description: ''
              operationId: getPrivateCompanyIncome
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: false
                description: the private filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-income-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"
                
          /private/{companyId}/jurisdictions:
            get:
              tags:
                - private
              summary: get private companies
              description: ''
              operationId: getPrivateCompanies
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: false
                description: the private filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-jurisdictions-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"

          /private/{companyId}/ownerships:
            get:
              tags:
                - private
              summary: get private company ownership
              description: ''
              operationId: getPrivateCompanyOwnership
              produces:
              - "application/json"
              parameters:
              - name: "companyName"
                in: "query"
                required: false
                description: the private filter
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/PrivateCompany"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '400':
                  description: "400 response"
                  schema:
                    $ref: '#/definitions/Error'
                '404':
                  description: "404 response"
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: "500 response"
                  schema:
                    $ref: '#/definitions/Error'
              security:
              - AppaAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate query string parameters and headers"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                credentials: "${LambdaExecutionRoleArn}"
                uri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-${EnvironmentType}-private-_companyId-ownership-get/invocations"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                authorizationType: "AWS_IAM"
            options:
              tags:
                - options
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_templates"
                type: "mock"


        x-amazon-apigateway-request-validators:
          Validate body:
            validateRequestParameters: false
            validateRequestBody: true
          Validate query string parameters and headers:
            validateRequestParameters: true
            validateRequestBody: false
          Validate body, query string parameters, and headers:
            validateRequestParameters: true
            validateRequestBody: true

        securityDefinitions:
          AppaAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              authorizerUri: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CustomAuthorizerFunction}/invocations"
              authorizerResultTtlInSeconds: 0
              type: "token"
          sigv4:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "awsSigv4"

        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
          Attachment:
            type: "object"
            properties:
              attachment_points_table:
                $ref: "#/definitions/Table"
              settlement_probabilities_table:
                $ref: "#/definitions/Table"
          CompanySearchResult:
            type: "object"
            title: "Company Search Result"
            properties:
              company_id:
                type: "string"
              name:
                type: "string"
              ticker:
                type: "string"
              market_cap:
                type: "string"
              sic:
                type: "string"
              industry:
                type: "string"
          CompanyProfile:
            type: "object"
            title: "Company Profile"
            properties:
              company_id:
                type: "string"
              name:
                type: "string"
              industry:
                type: "string"
              headquarters:
                type: "string"
              website:
                type: "string"
                format: uri
              phone:
                type: "string"
              sic:
                type: "string"
              market_cap:
                type: "string"
              market_cap_price_delta:
                type: "string"
              cfra_risk_score:
                type: "number"
              sweet_spot:
                type: "string"
          CompanyDetails:
            type: "object"
            title: "Company Info"
            properties:
              summary:
                type: "string"
              fiscal_year_ends:
                type: "string"
                format: "date"
              mrq:
                type: "string"
                format: "date"
              mrf:
                type: "string"
                format: "date"
              author:
                type: "string"
              years_in_business:
                type: "string"
              ipo:
                type: "string"
                format: "date"
          Document:
            type: "object"
            title: "Document"
            properties:
              document_id:
                type: "string"
              name:
                type: "string"
              type:
                type: "string"
              filing_date:
                type: "string"
              status:
                type: "string"
              amount:
                type: "string"
              risks:
                type: "array"
                items:
                  $ref: "#/definitions/Risk"
              notifications:
                type: "array"
                items:
                  $ref: "#/definitions/Notification"
          DocumentLink:
            type: "object"
            title: "Document Download"
            properties:
              url:
                type: "string"
          DocumentType:
            type: string
            title: "Document Type"
            enum:
              - 8-K
              - 10-K
              - 10-Q
              - Complaint
              - Proxy
          Notification:
            type: "object"
            title: "Notification"
            properties:
              notification_id:
                type: "string"
              notification_name:
                type: "string"
              negative_flag:
                type: "boolean"
          Risk:
            type: "object"
            title: "Risk"
            properties:
              risk_name:
                type: "string"
              risk_flag:
                type: "boolean"
          User:
            type: object
            title: "User"
            description: "User model to serve as response object"
            properties:
              user_id:
                type: string
              email:
                type: string
                format: email
              created_at:
                type: string
                format: date
              updated_at:
                type: string
                format: date
              worksheets:
                type: array
                items:
                  $ref: "#/definitions/Worksheet"
          Worksheet:
            type: "object"
            title: "Worksheet"
            description: "Worksheet model contains the record for a worksheet, including the submission and associated user notes"
            properties:
              worksheet_id:
                type: string
                description: "The worksheet id"
              cik:
                type: string
                description: "Central index key"
              company_name:
                type: string
                description: "The name of the company"
              ticker:
                type: string
                description: "The ticker of the company"
              user_id:
                type: string
                description: "The worksheet owner's user id"
              renewal:
                type: string
                description: "The worksheet is renewal or not"
              state:
                type: string
                enum:
                  - wip
                  - archived
              submission:
                $ref: "#/definitions/WorksheetSubmission"
              notes:
                description: "User notes associated with the worksheet"
                type: array
                maxItems: 5
                items:
                  $ref: "#/definitions/WorksheetNote"
          WorksheetSubmission:
            type: object
            title: "Submission"
            description: "All data pertaining to the submission of a worksheet"
            properties:
              submission_id:
                type: string
                description: "The submission id"
              type:
                type: string
                description: "The type of submission"
                enum:
                  - xs
                  - primary
              policy_id:
                type: string
                description: "The policy the worksheet is associated with"
              agency_id:
                type: string
                description: "Identifier for the agency"
              effective_date:
                type: string
                format: date
            required:
              - agency_id
          WorksheetNote:
            type: object
            title: "Note"
            description: "Custom notes taken by user for a given view in the worksheet"
            properties:
              note_id:
                type: string
                description: "The note's id"
              note_text:
                type: string
                description: "The note's content"
              note_page:
                type: string
                description: "The view the note is associated with"
                enum:
                  - overview
                  - trading
                  - financial
                  - risk
                  - news
              updated_at:
                type: string
            required:
              - note_id
              - note_page
          Article:
            type: "object"
            title: "Article"
            properties:
              id:
                type: string
              title:
                type: string
              source:
                type: string
              since:
                type: string
              excerpt:
                type: string
              article_url:
                type: string
                format: uri
              image_url:
                type: string
                format: uri
          Event:
            type: "object"
            title: "Event"
            description: "A company related news or other event"
            properties:
              title:
                type: string
              since:
                type: string
              excerpt:
                type: string
              category:
                type: string
          Error:
            type: "object"
            properties:
              status_code:
                type: "string"
              error_type:
                type: "string"
              error_message:
                type: "string"
          StockChartResponse:
            type: "object"
            title: "Stock Chart"
            properties:
              x_axis_name:
                type: string
              y_axis_name:
                type: string
              52w_volume:
                type: string
              52w_price:
                type: string
              company_index:
                type: object
                properties:
                  coordinates:
                    type: "array"
                    items:
                      $ref: "#/definitions/StockChartCoordinate"
              sp500_index:
                type: object
                properties:
                  coordinates:
                    type: "array"
                    items:
                      $ref: "#/definitions/StockChartCoordinate"
              nasdaq_index:
                type: object
                properties:
                  coordinates:
                    type: "array"
                    items:
                      $ref: "#/definitions/StockChartCoordinate"
              dowj_index:
                type: object
                properties:
                  coordinates:
                    type: "array"
                    items:
                      $ref: "#/definitions/StockChartCoordinate"
          StockChartCoordinate:
            type: "object"
            title: "Chart Coordinate"
            properties:
              point_metrics:
                type: "object"
                properties:
                  trading_volume:
                    type: "string"
                  stock_price:
                    type: "string"
                  stock_percent_change:
                    type: "string"
                  trading_percent_change:
                    type: "string"
              x_stock_value: 
                type: "number"
              y_stock_date: 
                type: "string"
                format: "date"
          StockCard:
            type: "object"
            title: "Stock Card"
            properties:
              value:
                type: "number"
              date:
                type: "string"
                format: "date"
              text:
                type: "string"
              is_negative:
                type: "boolean"
          RiskAggregation:
            type: "object"
            title: "Risk Aggregation"
            properties:
              filing_type: 
                type: "string"
              risk_name:
                type: "string"
              risk_frequency:
                type: "number"
          Holders:
            type: "object"
            title: "Holders"
            properties:
              percent_all_insider_shares:
                type: "number"
              last_filed:
                type: "string"
                format: "date"
          Table:
            type: "object"
            title: "Table"
            properties:
              columns:
                type: "array"
                items:
                  type: "object"
                  properties:
                    title:
                      type: "string"
                    field:
                      type: "string"
              data:
                type: "array"
                items:
                  type: "object"
                  additionalProperties:
                    oneOf":
                        - type: "string"
                        - type: "number"
          ESPEstimationChart:
            type: "object"
            title: "ESP Estimation Chart"
            properties:
              coordinates:
                type: "array"
                items:
                  $ref: "#/definitions/ESPChartCoordinate"
          ESPChartCoordinate:
            type: "object"
            title: "ESP Chart Coordinate"
            properties:
              estimate:
                type: "object"
                properties:
                  x:
                    type: "string"
                  y:
                    type: "string"
              actual:
                type: "object"
                properties:
                  x:
                    type: "string"
                  y:
                    type: "string"
          FinancialsChart:
            type: "object"
            title: "Financials Chart"
            properties:
              revenue:
                type: "array"
                items:
                  $ref: "#/definitions/FinancialChartCoordinate"
              operating_margin:
                type: "array"
                items:
                  $ref: "#/definitions/FinancialChartCoordinate"
              net_income:
                type: "array"
                items:
                  $ref: "#/definitions/FinancialChartCoordinate"
              earnings:
                type: "array"
                items:
                  $ref: "#/definitions/FinancialChartCoordinate"
              peer_group_avg:
                type: "array"
                items:
                  $ref: "#/definitions/FinancialChartCoordinate"
          FinancialChartCoordinate:
            type: "object"
            title: "Financial Chart Coordinate"
            properties:
              x:
                type: "string"
              y:
                type: "string"
          Earnings:
            type: "object"
            title: "Earnings Tables"
            properties:
              estimate:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              history:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
          Tradings:
            type: "object"
            title: "Tradings Tables"
            properties:
              stock_history:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              share_stats:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              dividends_splits:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
          AnalystRatingChart:
            type: "object"
            title: "Analyst Rating Chart"
            properties:
              company_value:
                type: "string"
              peer_value:
                type: "string"
          IncomeStatement:
            type: "object"
            title: "Income Statement"
            properties:
              revenue:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              operating_expenses:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              income_cont_ops:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              non_recurring_events:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              net_income:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
          BalanceSheet:
            type: "object"
            title: "Balance Sheet"
            properties:
              assets:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              liabilities:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              stockholder_equity:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
          CashFlow:
            type: "object"
            title: "Cash Flow"
            properties:
              period_ending:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              operating_activities:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              investing_activities:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              financing_activities:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
          Ratios:
            type: "object"
            title: "Ratios"
            properties:
              operations:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              management:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              coverage_leverage:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
              liquidity_activity:
                type: "object"
                properties:
                  title: 
                    type: "string"
                  table:
                    $ref: "#/definitions/Table"
          DebtMaturityChart:
            type: "object"
            title: "Debt Maturity Chart"
            properties:
              debt:
                type: "array"
                items:
                  $ref: "#/definitions/FinancialChartCoordinate"
              cash_position:
                type: "array"
                items:
                  $ref: "#/definitions/FinancialChartCoordinate"
              net_free_cash_flow:
                type: "array"
                items:
                  $ref: "#/definitions/FinancialChartCoordinate"
          Success:
            type: "object"
            properties:
              status_code:
                type: "string"
              status_message:
                type: "string"
          IndustryChart:
            type: "object"
            title: "Industry SCA Filing Chart"
            properties:
              py_axis_name: 
                type: "string"
              sy_axis_name:
                type: "string"
              categories:
                type: "array"
                items:
                  type: "object"
                  properties:
                    label: 
                      type: "string"
              dataseries:
                type: "array"
                items:
                  $ref: "#/definitions/IndustrySeries"
          IndustrySeries:
            type: "object"
            properties:
              name:
                type: "string"
              parent_y_axis:
                type: "string"
              data: 
                type: "array"
                items:
                  type: "object"
                  properties:
                    value:
                      type: "string"
          Predictor:
            type: "object"
            properties:
              metric_name: 
                type: "string"
              chart:
                type: "object"
                properties:
                  min:
                    type: "number"
                  med:
                    type: "number"
                  high:
                    type: "number"
                  actual:
                    type: "number"
              predictive_power:
                type: "string"
              impact_delta:
                type: "number"
          CoverageProgram:
            type: "object"
            properties: 
              tower_size:
                type: "number"
              num_layers:
                type: "number"
              retention:
                type: "number"
              effective_date:
                type: "string"
                format: "date"
              worksheet_id:
                type: "string"
              table:
                $ref: "#/definitions/Table"
          ExistingProgram:
            type: "object"
            properties:
              tower_size:
                type: "number"
              num_layers:
                type: "number"
              effective_date:
                type: "string"
                format: "date"
              effective_date:
                type: "string"
                format: "date"
              worksheet_id:
                type: "string"
              table:
                $ref: "#/definitions/Table"
          NewProgram:
            type: "object"
            properties:
              coverage_table:
                $ref: "#/definitions/Table"
              attachment_points_table:
                $ref: "#/definitions/Table"
              attachment_points_historical_table:
                $ref: "#/definitions/Table"
              settlement_probabilities_table:
                $ref: "#/definitions/Table"
          WorksheetType:
            type: "object"
            properties:
              documentType: "string"
          PrivateCompany:
            type: "object"
            properties:
              companyName: "string"
    DependsOn: ApiGatewayRole

  PublicApiParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /api/${EnvironmentType}/public/url
      Type: String
      Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentType}

Outputs:
  RestApiId:
    Value: !Ref ApiGateway

  ApiRegion:
    Value: !Ref AWS::Region

  ApiStage:
    Value: !Ref EnvironmentType
